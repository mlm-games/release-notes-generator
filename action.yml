name: 'release-notes-generator'
description: 'Generate clean release notes for CHANGELOG.md, version files, and various release platforms'
author: 'mlm-games'

inputs:
  version:
    description: 'Version number (e.g., 1.2.3)'
    required: true
  head-ref:
    description: 'Custom head ref'
    required: false
    default: 'HEAD'
  changelog-path:
    description: 'Path to CHANGELOG.md'
    required: false
    default: 'CHANGELOG.md'
  version-file-path:
    description: 'Path to version file (e.g., fastlane/vercode.txt or changelogs/123.txt)'
    required: false
    default: ''
  version-code:
    description: 'Version code for Android/Fastlane'
    required: false
    default: ''
  metainfo-path:
    description: 'Path to Flathub metainfo.xml file'
    required: false
    default: ''
  format:
    description: 'Release note format'
    required: false
    # You can also use: "- {{subject}} by @{{author-handle|committer-handle}}"
    default: '- {{subject}}'
  debug:
    description: 'Print debug info (range, preview)'
    required: false
    default: 'false'
  exclude-patterns:
    description: 'Comma-separated patterns to exclude from commits (applied to subject, anchored)'
    required: false
    default: 'Update version to,Merge ,Auto-generate changelog'
  vercode-prefix:
    description: 'Prefix used before version in CHANGELOG headers (e.g., "v")'
    required: false
    default: 'v'
  auto-commit:
    description: 'Automatically commit changes'
    required: false
    default: 'true'
  commit-message:
    description: 'Commit message template'
    required: false
    default: 'Update release notes for v{{version}}'

outputs:
  release-notes:
    description: 'Generated release notes'
  release-name:
    description: 'Release name (latest commit subject)'
  changelog-updated:
    description: 'Whether CHANGELOG.md was updated'
  files-changed:
    description: 'List of files that were changed'

runs:
  using: 'composite'
  steps:
    - name: Generate Release Notes
      id: generate
      shell: bash
      run: |
        set -Eeuo pipefail

        # Helper: derive a clean GitHub-like handle from name/email
        gh_handle() {
          # 1: name, 2: email
          local name="$1" email="$2" lp handle=""
          # emails like username@users.noreply.github.com or 12345+username@users.noreply.github.com
          if [[ "$email" =~ ^([^@]+)@users\.noreply\.github\.com$ ]]; then
            lp="${BASH_REMATCH[1]}"
            if [[ "$lp" == *"+"* ]]; then
              handle="${lp#*+}"
            else
              handle="$lp"
            fi
          fi
          # Fallback from name if it looks like a GitHub handle or bot
          if [ -z "$handle" ]; then
            # accept names that look like handles or bots, strip [bot]
            if [[ "$name" =~ ^([A-Za-z0-9][A-Za-z0-9-]{0,38})(\[bot\])?$ ]]; then
              handle="${BASH_REMATCH[1]}"
            fi
          fi
          printf '%s' "$handle"
        }

        HEAD_REF="${{ inputs.head-ref }}"

        # Determine tags and commit range (handles "HEAD is at a tag" case)
        LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
        HEAD_TAG="$(git describe --tags --exact-match "${HEAD_REF}" 2>/dev/null || true)"
        PREV_TAG=""
        if [ -n "$HEAD_TAG" ]; then
          PREV_TAG="$(git describe --tags --abbrev=0 --exclude="$HEAD_TAG" 2>/dev/null || true)"
        fi

        RANGE=()  # default: all commits
        if [ -n "$HEAD_TAG" ] && [ -n "$PREV_TAG" ]; then
          RANGE=("$PREV_TAG..${HEAD_REF}")
        elif [ -z "$HEAD_TAG" ] && [ -n "$LATEST_TAG" ]; then
          RANGE=("$LATEST_TAG..${HEAD_REF}")
        fi

        # Build anchored, regex-safe exclusion regex from comma-separated list
        RAW="${{ inputs.exclude-patterns }}"
        IFS=',' read -ra EX_PATTERNS <<< "$RAW"
        EX_REGEX=""
        for p in "${EX_PATTERNS[@]}"; do
          # trim
          p="$(echo "$p" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
          [ -z "$p" ] && continue
          # escape regex meta
          ep="$(printf '%s' "$p" | sed -E 's/[][(){}.^$*+?|\\/]/\\&/g')"
          ep="^${ep}"
          EX_REGEX="${EX_REGEX:+${EX_REGEX}|}${ep}"
        done

        RELEASE_NOTES=""
        RELEASE_NAME=""

        # Stream NUL-delimited fields directly from git to avoid losing data in variables
        # Fields: hash, short, author, author_email, committer, committer_email, subject, body (then NUL)
        exec 3< <(git log -z "${RANGE[@]}" --no-merges --pretty=format:'%H%x00%h%x00%an%x00%ae%x00%cn%x00%ce%x00%s%x00%b%x00')

        while :; do
          IFS= read -r -d '' hash <&3 || break
          IFS= read -r -d '' short <&3 || break
          IFS= read -r -d '' author <&3 || break
          IFS= read -r -d '' author_email <&3 || break
          IFS= read -r -d '' committer <&3 || break
          IFS= read -r -d '' committer_email <&3 || break
          IFS= read -r -d '' subject <&3 || break
          IFS= read -r -d '' body <&3 || break

          # Apply exclusion against subject (anchored)
          if [ -n "$EX_REGEX" ] && printf '%s' "$subject" | grep -Eq "$EX_REGEX"; then
            continue
          fi

          # Derive handles
          author_handle="$(gh_handle "$author" "$author_email")"
          committer_handle="$(gh_handle "$committer" "$committer_email")"

          tpl='${{ inputs.format }}'

          # message = one-line "subject + body"
          msg="$(printf '%s %s' "$subject" "$body" \
                | tr '\r\n' ' ' \
                | sed -E 's/[[:space:]]+/ /g; s/^[[:space:]]+|[[:space:]]+$//g')"

          # Simple placeholders
          tpl="${tpl//\{\{subject\}\}/$subject}"
          tpl="${tpl//\{\{author\}\}/$author}"
          tpl="${tpl//\{\{committer\}\}/$committer}"
          tpl="${tpl//\{\{message\}\}/$msg}"
          tpl="${tpl//\{\{hash\}\}/$hash}"
          tpl="${tpl//\{\{short-hash\}\}/$short}"
          tpl="${tpl//\{\{short\}\}/$short}"
          tpl="${tpl//\{\{author-email\}\}/$author_email}"
          tpl="${tpl//\{\{committer-email\}\}/$committer_email}"
          tpl="${tpl//\{\{author-handle\}\}/$author_handle}"
          tpl="${tpl//\{\{committer-handle\}\}/$committer_handle}"

          # Fallbacks: {{a|b|c}} (choose first non-empty among known tokens)
          # Supported tokens in fallbacks: subject, author, committer, message, hash, short, short-hash, author-email, committer-email, author-handle, committer-handle
          while [[ "$tpl" =~ \{\{([^}]+)\}\} ]]; do
            ph="${BASH_REMATCH[1]}"
            IFS='|' read -ra opts <<< "$ph"
            rep=""
            for opt in "${opts[@]}"; do
              case "$opt" in
                subject)            rep="$subject" ;;
                author)             rep="$author" ;;
                committer)          rep="$committer" ;;
                message)            rep="$msg" ;;
                hash)               rep="$hash" ;;
                short|short-hash)   rep="$short" ;;
                author-email)       rep="$author_email" ;;
                committer-email)    rep="$committer_email" ;;
                author-handle)      rep="$author_handle" ;;
                committer-handle)   rep="$committer_handle" ;;
              esac
              [ -n "$rep" ] && break
            done
            # If nothing matched, replace with empty to avoid leaking placeholders
            tpl="${tpl//\{\{$ph\}\}/$rep}"
            # Continue until no more {{...}} tokens remain
            [[ "$tpl" =~ \{\{([^}]+)\}\} ]] || break
          done

          # Cleanup: collapse spaces, trim, and remove dangling "by @" fragments
          tpl="$(printf '%s' "$tpl" \
                | sed -E 's/[[:space:]]+/ /g; s/^[[:space:]]+|[[:space:]]+$//g' \
                | sed -E 's/[[:space:]]+by[[:space:]]+@$//; s/@[[:space:]]*$//')"

          # Skip empty lines
          [ -z "$tpl" ] && continue

          RELEASE_NOTES+="${tpl}"$'\n'
          [ -z "$RELEASE_NAME" ] && RELEASE_NAME="$subject"
        done

        exec 3<&-

        # Trim trailing newline
        RELEASE_NOTES="${RELEASE_NOTES%$'\n'}"

        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "Latest tag: ${LATEST_TAG}"
          echo "Head ref: ${HEAD_REF}"
          echo "Head tag (if any): ${HEAD_TAG}"
          echo "Previous tag (if head is tagged): ${PREV_TAG}"
          if [ "${#RANGE[@]}" -eq 0 ]; then
            echo "Computed range: <all commits>"
          else
            echo "Computed range: ${RANGE[*]}"
          fi
          echo "Exclude regex: ${EX_REGEX:-<none>}"
          echo "Preview (first 20 lines):"
          printf '%s\n' "$RELEASE_NOTES" | head -20
        fi

        # Output to GITHUB_OUTPUT safely using a unique delimiter
        DELIM="END_OF_RELEASE_NOTES_$(date +%s%N)_$RANDOM"
        {
          printf 'release-notes<<%s\n' "$DELIM"
          printf '%s\n' "$RELEASE_NOTES"
          printf '%s\n' "$DELIM"
          printf 'release-name=%s\n' "$RELEASE_NAME"
        } >> "$GITHUB_OUTPUT"

        # Save to file for later steps
        printf '%s\n' "$RELEASE_NOTES" > /tmp/release-notes.txt

    - name: Update CHANGELOG.md
      if: inputs.changelog-path != ''
      id: changelog
      shell: bash
      run: |
        set -Eeuo pipefail
        CHANGELOG_PATH="${{ inputs.changelog-path }}"
        VERSION="${{ inputs.version }}"
        HEADER_PREFIX="${{ inputs.vercode-prefix }}"
        HEADER_LINE="## ${HEADER_PREFIX}${VERSION}"
        UPDATED="false"

        # Helper: write notes or fallback bullet
        write_notes() {
          if [ -s /tmp/release-notes.txt ]; then
            cat /tmp/release-notes.txt
          else
            echo "- No changes since previous release"
          fi
        }

        if [ -f "$CHANGELOG_PATH" ]; then
          if grep -Fq "$HEADER_LINE" "$CHANGELOG_PATH"; then
            echo "Version header already exists in ${CHANGELOG_PATH}: $HEADER_LINE"
          else
            {
              echo "$HEADER_LINE"
              echo ""
              write_notes
              echo ""
              echo ""
              cat "$CHANGELOG_PATH"
            } > /tmp/new-changelog.md
            mv /tmp/new-changelog.md "$CHANGELOG_PATH"
            UPDATED="true"
            echo "Updated ${CHANGELOG_PATH}"
          fi
        else
          {
            echo "# Changelog"
            echo ""
            echo "$HEADER_LINE"
            echo ""
            write_notes
            echo ""
          } > "$CHANGELOG_PATH"
          UPDATED="true"
          echo "Created ${CHANGELOG_PATH}"
        fi

        echo "changelog-updated=$UPDATED" >> "$GITHUB_OUTPUT"

    - name: Update Version File
      if: inputs.version-file-path != '' && inputs.version-code != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        VERSION_FILE="${{ inputs.version-file-path }}"
        VERSION_CODE="${{ inputs.version-code }}"
        mkdir -p "$(dirname "$VERSION_FILE")"

        if [[ "$VERSION_FILE" == *"/changelogs/"* ]]; then
          # For Fastlane-style per-build changelog files
          cat /tmp/release-notes.txt > "$VERSION_FILE"
        else
          # For simple numeric version code files
          echo "$VERSION_CODE" > "$VERSION_FILE"
        fi

        echo "Updated version file: $VERSION_FILE"

    - name: Update Flathub Metainfo
      if: inputs.metainfo-path != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        METAINFO_PATH="${{ inputs.metainfo-path }}"
        VERSION="${{ inputs.version }}"

        if [ -f "$METAINFO_PATH" ]; then
          RELEASE_ENTRY="    <release version=\"${VERSION}\" date=\"$(date +%Y-%m-%d)\">\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}      <description>\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}        <ul>\n"
          if [ -s /tmp/release-notes.txt ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              ITEM="$(echo "$line" | sed 's/^- //' | sed 's/^[[:space:]]*//')"
              RELEASE_ENTRY="${RELEASE_ENTRY}          <li>${ITEM}</li>\n"
            done < /tmp/release-notes.txt
          else
            RELEASE_ENTRY="${RELEASE_ENTRY}          <li>No changes since previous release</li>\n"
          fi
          RELEASE_ENTRY="${RELEASE_ENTRY}        </ul>\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}      </description>\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}    </release>"

          if grep -q "<releases>" "$METAINFO_PATH"; then
            if grep -q "version=\"${VERSION}\"" "$METAINFO_PATH"; then
              echo "Version ${VERSION} already exists in ${METAINFO_PATH}"
            else
              sed -i "/<releases>/a\\${RELEASE_ENTRY}" "$METAINFO_PATH"
              echo "Updated ${METAINFO_PATH}"
            fi
          else
            echo "Warning: <releases> tag not found in ${METAINFO_PATH}"
          fi
        else
          echo "Warning: Metainfo file not found at ${METAINFO_PATH}"
        fi

    - name: Collect Changed Files
      id: files
      shell: bash
      run: |
        set -Eeuo pipefail
        CHANGED_FILES=""

        if [ "${{ steps.changelog.outputs.changelog-updated }}" = "true" ]; then
          CHANGED_FILES="${{ inputs.changelog-path }}"
        fi

        if [ -n "${{ inputs.version-file-path }}" ] && [ -n "${{ inputs.version-code }}" ]; then
          if [ -n "$CHANGED_FILES" ]; then
            CHANGED_FILES="$CHANGED_FILES,${{ inputs.version-file-path }}"
          else
            CHANGED_FILES="${{ inputs.version-file-path }}"
          fi
        fi

        if [ -n "${{ inputs.metainfo-path }}" ] && [ -f "${{ inputs.metainfo-path }}" ]; then
          if [ -n "$CHANGED_FILES" ]; then
            CHANGED_FILES="$CHANGED_FILES,${{ inputs.metainfo-path }}"
          else
            CHANGED_FILES="${{ inputs.metainfo-path }}"
          fi
        fi

        echo "files-changed=$CHANGED_FILES" >> "$GITHUB_OUTPUT"

    - name: Commit Changes
      if: inputs.auto-commit == 'true' && steps.files.outputs.files-changed != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions"

        IFS=',' read -ra FILES <<< "${{ steps.files.outputs.files-changed }}"
        for file in "${FILES[@]}"; do
          if [ -f "$file" ]; then
            git add "$file"
          fi
        done

        COMMIT_MSG="${{ inputs.commit-message }}"
        COMMIT_MSG="${COMMIT_MSG//\{\{version\}\}/${{ inputs.version }}}"

        git commit -m "$COMMIT_MSG" || echo "No changes to commit"
        git push || echo "Nothing to push"

branding:
  icon: 'file-text'
  color: 'blue'
