name: 'release-notes-generator'
description: 'Generate release notes for CHANGELOG.md, version files, and various release platforms'
author: 'mlm-games'

inputs:
  version:
    description: 'Version number (e.g., 1.2.3)'
    required: true
  head-ref:
    description: 'Custom head ref'
    required: false
    default: 'HEAD'
  changelog-path:
    description: 'Path to CHANGELOG.md'
    required: false
    default: 'CHANGELOG.md'
  version-file-path:
    description: 'Path to version file (e.g., fastlane/vercode.txt or changelogs/123.txt)'
    required: false
    default: ''
  version-code:
    description: 'Version code for Android/Fastlane'
    required: false
    default: ''
  metainfo-path:
    description: 'Path to Flathub metainfo.xml file'
    required: false
    default: ''
  format:
    description: 'Release note format'
    required: false
    default: '- {{subject}}' # by @{{author}} is another common use case
  debug:
    description: 'Print debug info (range, preview)'
    required: false
    default: 'false'
  exclude-patterns:
    description: 'Comma-separated patterns to exclude from commits (applied to subject, anchored)'
    required: false
    default: 'Update version to,Merge ,Auto-generate changelog'
  auto-commit:
    description: 'Automatically commit changes'
    required: false
    default: 'true'
  commit-message:
    description: 'Commit message template'
    required: false
    default: 'Update release notes for v{{version}}'

outputs:
  release-notes:
    description: 'Generated release notes'
  release-name:
    description: 'Release name (latest commit subject)'
  changelog-updated:
    description: 'Whether CHANGELOG.md was updated'
  files-changed:
    description: 'List of files that were changed'

runs:
  using: 'composite'
  steps:
    - name: Generate Release Notes
      id: generate
      shell: bash
      run: |
        set -Eeuo pipefail

        HEAD_REF="${{ inputs.head-ref }}"
        LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
        if [ -n "$LATEST_TAG" ]; then
          RANGE=("$LATEST_TAG..${HEAD_REF}")
        else
          RANGE=() # all commits
        fi

        # Use non-printable separators to survive pipes/newlines in data
        F=$'\x1F'  # field sep
        R=$'\x1E'  # record sep
        COMMITS="$(git log "${RANGE[@]}" --no-merges --pretty=format:"%H${F}%an${F}%cn${F}%s${F}%b${R}")"

        # Build anchored, regex-safe exclusion regex from comma-separated list
        RAW="${{ inputs.exclude-patterns }}"
        IFS=',' read -ra EX_PATTERNS <<< "$RAW"
        EX_REGEX=""
        for p in "${EX_PATTERNS[@]}"; do
          # trim
          p="$(echo "$p" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
          [ -z "$p" ] && continue
          # escape regex meta
          ep="$(printf '%s' "$p" | sed -E 's/[][(){}.^$*+?|\\/]/\\&/g')"
          ep="^${ep}"
          EX_REGEX="${EX_REGEX:+${EX_REGEX}|}${ep}"
        done

        RELEASE_NOTES=""
        RELEASE_NAME=""

        # Iterate records
        while IFS= read -r -d $'\x1E' rec; do
          [ -z "$rec" ] && continue
          IFS=$'\x1F' read -r hash author committer subject body <<< "$rec"

          # Apply exclusion against subject
          if [ -n "$EX_REGEX" ] && echo "$subject" | grep -Eq "$EX_REGEX"; then
            continue
          fi

          tpl='${{ inputs.format }}'
          # message = one-line "subject + body"
          msg="$(printf '%s %s' "$subject" "$body" | tr '\n' ' ' | sed -E 's/[[:space:]]+/ /g' | sed -E 's/[[:space:]]+$//')"

          # simple placeholders
          tpl="${tpl//\{\{subject\}\}/$subject}"
          tpl="${tpl//\{\{author\}\}/$author}"
          tpl="${tpl//\{\{committer\}\}/$committer}"
          tpl="${tpl//\{\{message\}\}/$msg}"

          # fallbacks: {{a|b|c}}
          while [[ "$tpl" =~ \{\{([^}]+)\}\} ]]; do
            ph="${BASH_REMATCH[1]}"
            IFS='|' read -ra opts <<< "$ph"
            rep=""
            for opt in "${opts[@]}"; do
              case "$opt" in
                subject) rep="$subject" ;;
                author) rep="$author" ;;
                committer) rep="$committer" ;;
                message) rep="$msg" ;;
              esac
              [ -n "$rep" ] && break
            done
            tpl="${tpl//\{\{$ph\}\}/$rep}"
          done

          RELEASE_NOTES+="${tpl}"$'\n'
          [ -z "$RELEASE_NAME" ] && RELEASE_NAME="$subject"
        done <<< "$COMMITS"

        RELEASE_NOTES="${RELEASE_NOTES%$'\n'}"

        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "Latest tag: ${LATEST_TAG}"
          echo "Head ref: ${HEAD_REF}"
          echo "Exclude regex: ${EX_REGEX}"
          echo "Preview (first 20 lines):"
          echo "$RELEASE_NOTES" | head -20
        fi

        {
          echo "release-notes<<'EOF'"
          echo "$RELEASE_NOTES"
          echo "EOF"
          echo "release-name=$RELEASE_NAME"
        } >> "$GITHUB_OUTPUT"

        printf '%s\n' "$RELEASE_NOTES" > /tmp/release-notes.txt

    - name: Update CHANGELOG.md
      if: inputs.changelog-path != ''
      id: changelog
      shell: bash
      run: |
        set -Eeuo pipefail
        CHANGELOG_PATH="${{ inputs.changelog-path }}"
        VERSION="${{ inputs.version }}"
        UPDATED="false"
        
        if [ -f "$CHANGELOG_PATH" ]; then
          if grep -q "## ${VERSION}" "$CHANGELOG_PATH"; then
            echo "Version ${VERSION} already exists in ${CHANGELOG_PATH}"
          else
            {
              echo "## ${VERSION}"
              echo ""
              cat /tmp/release-notes.txt
              echo ""
              echo ""
              cat "$CHANGELOG_PATH"
            } > /tmp/new-changelog.md
            mv /tmp/new-changelog.md "$CHANGELOG_PATH"
            UPDATED="true"
            echo "Updated ${CHANGELOG_PATH}"
          fi
        else
          {
            echo "# Changelog"
            echo ""
            echo "## ${VERSION}"
            echo ""
            cat /tmp/release-notes.txt
            echo ""
          } > "$CHANGELOG_PATH"
          UPDATED="true"
          echo "Created ${CHANGELOG_PATH}"
        fi
        
        echo "changelog-updated=$UPDATED" >> $GITHUB_OUTPUT

    - name: Update Version File
      if: inputs.version-file-path != '' && inputs.version-code != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        VERSION_FILE="${{ inputs.version-file-path }}"
        VERSION_CODE="${{ inputs.version-code }}"
        mkdir -p "$(dirname "$VERSION_FILE")"
        
        if [[ "$VERSION_FILE" == *"/changelogs/"* ]]; then
          cat /tmp/release-notes.txt > "$VERSION_FILE"
        else
          echo "$VERSION_CODE" > "$VERSION_FILE"
        fi
        
        echo "Updated version file: $VERSION_FILE"

    - name: Update Flathub Metainfo
      if: inputs.metainfo-path != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        METAINFO_PATH="${{ inputs.metainfo-path }}"
        VERSION="${{ inputs.version }}"
        
        if [ -f "$METAINFO_PATH" ]; then
          RELEASE_ENTRY="    <release version=\"${VERSION}\" date=\"$(date +%Y-%m-%d)\">\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}      <description>\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}        <ul>\n"
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              ITEM="$(echo "$line" | sed 's/^- //' | sed 's/^[[:space:]]*//')"
              RELEASE_ENTRY="${RELEASE_ENTRY}          <li>${ITEM}</li>\n"
            fi
          done < /tmp/release-notes.txt
          RELEASE_ENTRY="${RELEASE_ENTRY}        </ul>\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}      </description>\n"
          RELEASE_ENTRY="${RELEASE_ENTRY}    </release>"
          
          if grep -q "<releases>" "$METAINFO_PATH"; then
            if grep -q "version=\"${VERSION}\"" "$METAINFO_PATH"; then
              echo "Version ${VERSION} already exists in ${METAINFO_PATH}"
            else
              sed -i "/<releases>/a\\${RELEASE_ENTRY}" "$METAINFO_PATH"
              echo "Updated ${METAINFO_PATH}"
            fi
          else
            echo "Warning: <releases> tag not found in ${METAINFO_PATH}"
          fi
        else
          echo "Warning: Metainfo file not found at ${METAINFO_PATH}"
        fi

    - name: Collect Changed Files
      id: files
      shell: bash
      run: |
        set -Eeuo pipefail
        CHANGED_FILES=""
        
        if [ "${{ steps.changelog.outputs.changelog-updated }}" = "true" ]; then
          CHANGED_FILES="${{ inputs.changelog-path }}"
        fi
        
        if [ -n "${{ inputs.version-file-path }}" ] && [ -n "${{ inputs.version-code }}" ]; then
          if [ -n "$CHANGED_FILES" ]; then
            CHANGED_FILES="$CHANGED_FILES,${{ inputs.version-file-path }}"
          else
            CHANGED_FILES="${{ inputs.version-file-path }}"
          fi
        fi
        
        if [ -n "${{ inputs.metainfo-path }}" ] && [ -f "${{ inputs.metainfo-path }}" ]; then
          if [ -n "$CHANGED_FILES" ]; then
            CHANGED_FILES="$CHANGED_FILES,${{ inputs.metainfo-path }}"
          else
            CHANGED_FILES="${{ inputs.metainfo-path }}"
          fi
        fi
        
        echo "files-changed=$CHANGED_FILES" >> $GITHUB_OUTPUT

    - name: Commit Changes
      if: inputs.auto-commit == 'true' && steps.files.outputs.files-changed != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions"
        
        IFS=',' read -ra FILES <<< "${{ steps.files.outputs.files-changed }}"
        for file in "${FILES[@]}"; do
          if [ -f "$file" ]; then
            git add "$file"
          fi
        done
        
        COMMIT_MSG="${{ inputs.commit-message }}"
        COMMIT_MSG="${COMMIT_MSG//\{\{version\}\}/${{ inputs.version }}}"
        
        git commit -m "$COMMIT_MSG" || echo "No changes to commit"
        git push || echo "Nothing to push"

branding:
  icon: 'file-text'
  color: 'blue'